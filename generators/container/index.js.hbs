/**
*
* {{ properCase name }}
*
*/

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { compose } from 'redux';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { Helmet } from 'react-helmet';
import injectReducer from '../../utils/injectReducer';
import injectSaga from '../../utils/injectSaga';
import reducer from './reducer';
import saga from './saga';
import { makeSelect{{ properCase name }}s } from './selectors';
import { load{{ properCase name }}s } from './actions';

class {{ properCase name }} extends Component {
  state = {
  };
  componentDidMount() {
    // this.props.load{{ properCase name }}s();
  }
  render{{ properCase name }}s = () => {
    const { {{ camelCase name }}s } = this.props;
    if ({{ camelCase name }}s === null) { return <div>Empty State</div>; }
    return {{ camelCase name }}s.map(({{ camelCase name }}) => <div key={ {{ camelCase name }}.id } >{ {{ properCase name }}.title }</div>);
  }
  renderHead() {
    return (
      <Helmet>
        <title>{{ properName name }}</title>
      </Helmet>
    );
  }
  render() {
    const { renderHead } = this;
    return (
      <div>
        { renderHead() }
        <h1>{{ properCase name }}</h1>
        { /* this.render{{properCase name}}s() */ }
      </div>
    );
  }
}

{{ properCase name }}.propTypes = {
  {{ camelCase name }}s: PropTypes.array,
  posts: PropTypes.array,
  loading: PropTypes.bool.isRequired,
  // load{{ properName name }}: PropTypes.func.isRequired,
};

const mapStateToProps = createStructuredSelector({
  {{ camelCase name }}s: makeSelect{{ properCase name }}s(),
  loading: makeSelect{{ properName name }}sLoading(),
});

const mapDispatchToProps = (dispatch) => ({
  // load{{ properCase name }}s: () => dispatch(load{{ pascalCase name }}s()),
});

const withConnect = connect(mapStateToProps, mapDispatchToProps);
const withReducer = injectReducer({ key: '{{ camelCase name }}s', reducer });
const withSaga = injectSaga({ key: '{{ camelCase name }}s', saga });
export default compose(
  withReducer,
  withSaga,
  withConnect,
)({{ properCase name }});
