/**
*
{{#if isPage}}
* {{ pageCase name }}
{{else}}
* {{ properCase name }}
{{/if}}
*
*/

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { compose } from 'redux';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { Helmet } from 'react-helmet';
import injectReducer from '../../utils/injectReducer';
import injectSaga from '../../utils/injectSaga';
import reducer from './reducer';
import saga from './saga';
import { makeSelect{{ properCase name }}s, makeSelect{{ properCase name }}sLoading } from './selectors';
import { load{{ properCase name }}s } from './actions';

{{#if isPage}}
class {{ pageCase name }} extends Component {
{{else}}
class {{ properCase name }} extends Component {
{{/if}}
  state = {
  };
  componentDidMount() {
    // this.props.load{{ properCase name }}s();
  }
  // render{{ dashCase properCase name }}s = () => {
  //   const { {{ camelCase name }}s } = this.props;
  //   if ({{ dashCase camelCase name }}s === null) { return <div>Empty State</div>; }
  //   return {{ camelCase name }}s.map(({{ camelCase name }}) => <div key={ {{ camelCase name }}.id } >{ {{ properCase name }}.title }</div>);
  // }
  renderHead() {
    return (
      <Helmet>
        <title>{{ properCase name }}</title>
      </Helmet>
    );
  }
  render() {
    const { renderHead } = this;
    return (
  {{#if isPage}}
      <div className="{{ dashCase (pageCase name) }}">
  {{else}}
      <div className="{{ dashCase (properCase name) }}">
  {{/if}}
        { renderHead() }
        <h1>{{ properCase name }}</h1>
        { /* this.render{{properCase name}}s() */ }
      </div>
    );
  }
}
{{#if isPage}}
{{ pageCase name }}.propTypes = {
{{else}}
{{ properCase name }}.propTypes = {
{{/if}}
  {{ camelCase name }}s: PropTypes.array,
  loading: PropTypes.bool.isRequired,
  // load{{ properCase name }}: PropTypes.func.isRequired,
};

const mapStateToProps = createStructuredSelector({
  {{ camelCase name }}s: makeSelect{{ properCase name }}s(),
  loading: makeSelect{{ properCase name }}sLoading(),
});

const mapDispatchToProps = (dispatch) => ({
  // load{{ properCase name }}s: () => dispatch(load{{ pascalCase name }}s()),
});

const withConnect = connect(mapStateToProps, mapDispatchToProps);
const withReducer = injectReducer({ key: '{{ camelCase name }}s', reducer });
const withSaga = injectSaga({ key: '{{ camelCase name }}s', saga });
export default compose(
  withReducer,
  withSaga,
  withConnect,
{{#if isPage}}
)({{ pageCase name }});
{{else}}
)({{ properCase name }});
{{/if}}